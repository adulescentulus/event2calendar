on:
  push:
    paths-ignore:
      - 'docs/*'
    branches-ignore:
      - 'wip-**'
  delete:

name: Deploy to AWS Lambda

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-18.04
    if: github.event_name == 'push'

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Cache mvn repo
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - uses: DeLaGuardo/setup-graalvm@1.0
        with:
          graalvm-version: '19.2.1'

      - name: Maven package
        id: package
        run: |
          ${JAVA_HOME}/bin/gu install native-image
          # package it
          mvn -B package -Pnative

      - name: Archive function.zip
        uses: actions/upload-artifact@v1
        with:
          name: function.zip
          path: lambda-modules/lambda.backend/target/function.zip

      - name: Define slug variables
        uses: rlespinasse/github-slug-action@1.1.0

      - name: Set STACK_NAME
        env:
          STACK_NAME_BASE: event2calendar
        run: |
          export STACK_NAME=${STACK_NAME_BASE}-${{ env.GITHUB_REF_SLUG }}
          echo "::set-env name=STACK_NAME::${STACK_NAME}"

      - name: Deploy
        id: deploy
        env:
          S3_BUCKET: nc-projects-infrabucket
        working-directory: ./cfn
        run: |
          echo using STACK_NAME ${STACK_NAME}
          chmod +x prepare_template.sh
          ./prepare_template.sh
          aws cloudformation package --template aws-resources.yml --s3-bucket $S3_BUCKET --s3-prefix event2calendar --output-template template-export.yml
          aws cloudformation deploy  --template-file=template-export.yml --stack-name="${STACK_NAME}" --capabilities=CAPABILITY_NAMED_IAM
          export ENDPOINT=$(aws cloudformation describe-stacks --stack-name="${STACK_NAME}" | jq -r '.Stacks | .[0] | .Outputs[] | select(.OutputKey=="LambdaEndpoint") | .OutputValue')
          echo "::set-env name=ENDPOINT::${ENDPOINT}"
      - name: Verify
        run: |
          echo Using endpoint ${ENDPOINT}
          curl -s ${ENDPOINT}/version
          echo -n Checking demoevent ...
          curl -s "${ENDPOINT}/url/aHR0cDovL2UyYy5uZXR3b3JrY2hhbGxlbmdlLmRlL2RlbW8vZXZlbnRkZW1vLmh0bWw="
          test "Exciting Event" == "$(curl -s ${ENDPOINT}/url/aHR0cDovL2UyYy5uZXR3b3JrY2hhbGxlbmdlLmRlL2RlbW8vZXZlbnRkZW1vLmh0bWw\= | jq -r '.events[0] | .eventTitle')"
          echo done.
  delete:
    name: Delete old stack
    runs-on: ubuntu-18.04
    if: github.event_name == 'delete' && github.event.ref_type == 'branch'

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Set STACK_NAME
        env:
          STACK_NAME_BASE: event2calendar
          EVENT_REF: ${{ github.event.ref }}
        run: |
          echo debugging event.ref ${EVENT_REF}
          export BRANCH_NAME=$(echo "$EVENT_REF" \
               | tr "[:upper:]" "[:lower:]" \
               | sed -r 's#refs/[^\/]*/##;s/[~\^]+//g;s/[^a-zA-Z0-9]+/-/g;s/^-+\|-+$//g;s/^-*//;s/-*$//' \
               | cut -c1-63)
          echo branch_name is now $BRANCH_NAME
          export STACK_NAME=${STACK_NAME_BASE}-${BRANCH_NAME}
          echo "new stack name ${STACK_NAME}"
          echo "::set-env name=STACK_NAME::${STACK_NAME}"

      - name: cleanup AWS
        run: |
          echo using STACK_NAME ${STACK_NAME}
          aws cloudformation delete-stack --stack-name="${STACK_NAME}"

